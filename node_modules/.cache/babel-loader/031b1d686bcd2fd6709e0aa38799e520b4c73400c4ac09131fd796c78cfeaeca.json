{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jonat\\\\OneDrive\\\\Documentos\\\\Projetos Pessoais\\\\Flashcards\\\\flashcards\\\\src\\\\FlashcardsApp.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Card, CardContent } from \"./components/ui/card\";\nimport { Button } from \"./components/ui/button\";\nimport ThemeToggle from \"./components/ui/ThemeToggle\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst flashcards = [{\n  question: \"O que são dados?\",\n  answer: \"Representações brutas de fatos, como números, nomes ou imagens, que sozinhos não têm significado.\"\n}, {\n  question: \"O que é informação?\",\n  answer: \"Resultado da análise ou processamento dos dados, fornecendo contexto e significado.\"\n}, {\n  question: \"O que é um banco de dados?\",\n  answer: \"Coleção organizada de dados persistentes, usados para armazenar e recuperar informações.\"\n}, {\n  question: \"O que é um SGBD?\",\n  answer: \"Sistema de Gerenciamento de Banco de Dados, software que manipula e controla o acesso aos dados.\"\n}, {\n  question: \"Quais os níveis de abstração de um BD?\",\n  answer: \"Conceitual (significado dos dados), Lógico (estrutura relacional) e Físico (armazenamento).\"\n}, {\n  question: \"O que é uma transação?\",\n  answer: \"Conjunto de operações que realizam uma função lógica completa no banco de dados.\"\n}, {\n  question: \"O que significa ACID?\",\n  answer: \"Conjunto de propriedades das transações: Atomicidade, Consistência, Isolamento e Durabilidade.\"\n}, {\n  question: \"Defina Atomicidade\",\n  answer: \"Transações são indivisíveis: ou ocorrem completamente ou não ocorrem.\"\n}, {\n  question: \"Defina Consistência\",\n  answer: \"Transações mantêm o banco de dados em um estado válido.\"\n}, {\n  question: \"Defina Isolamento\",\n  answer: \"Transações simultâneas não interferem entre si.\"\n}, {\n  question: \"Defina Durabilidade\",\n  answer: \"Transações concluídas permanecem no banco mesmo após falhas.\"\n}, {\n  question: \"O que é uma entidade?\",\n  answer: \"Objeto do mundo real representado no banco, como Pessoa ou Produto.\"\n}, {\n  question: \"O que é uma entidade forte?\",\n  answer: \"Entidade que existe independentemente de outras.\"\n}, {\n  question: \"O que é uma entidade fraca?\",\n  answer: \"Entidade que depende de outra para existir.\"\n}, {\n  question: \"O que é um relacionamento?\",\n  answer: \"Associação entre duas ou mais entidades.\"\n}, {\n  question: \"O que é um relacionamento identificador?\",\n  answer: \"Relacionamento entre entidade forte e entidade fraca.\"\n}, {\n  question: \"O que é cardinalidade?\",\n  answer: \"Define o número de ocorrências entre entidades (1:1, 1:N, N:N).\"\n}, {\n  question: \"O que é um atributo?\",\n  answer: \"Característica de uma entidade ou relacionamento.\"\n}, {\n  question: \"O que é um atributo identificador?\",\n  answer: \"Atributo que diferencia cada ocorrência (ex: id, RA).\"\n}, {\n  question: \"O que é um atributo composto?\",\n  answer: \"Atributo formado por subatributos (ex: endereço → rua, cidade).\"\n}, {\n  question: \"O que é um atributo multivalorado?\",\n  answer: \"Atributo que pode ter vários valores (ex: telefone).\"\n}, {\n  question: \"O que é generalização e especialização?\",\n  answer: \"Relação entre entidade genérica e suas versões específicas (Pessoa → Aluno, Professor).\"\n}];\nexport default function FlashcardsApp() {\n  _s();\n  const [index, setIndex] = useState(0);\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [quizResults, setQuizResults] = useState({\n    correct: 0,\n    incorrect: 0\n  });\n  const [quizCompleted, setQuizCompleted] = useState(false);\n  const [options, setOptions] = useState([]);\n\n  // Função para embaralhar um array\n  const shuffleArray = array => array.sort(() => Math.random() - 0.5);\n\n  // Função para gerar opções de resposta para o modo prova\n  const generateOptions = currentIndex => {\n    const correctAnswer = flashcards[currentIndex].answer; // Use o índice atual passado como argumento\n    const incorrectAnswers = flashcards.filter((_, i) => i !== currentIndex) // Exclui a resposta correta\n    .map(card => card.answer);\n    const randomIncorrectAnswers = shuffleArray(incorrectAnswers).slice(0, 3); // Seleciona 3 respostas erradas\n    const allOptions = shuffleArray([correctAnswer, ...randomIncorrectAnswers]); // Embaralha as opções\n    setOptions(allOptions);\n  };\n\n  // Alternar para o modo prova\n  const startQuizMode = () => {\n    setIsQuizMode(true);\n    setQuizResults({\n      correct: 0,\n      incorrect: 0\n    });\n    setQuizCompleted(false);\n    setIndex(0);\n    generateOptions(0);\n  };\n\n  // Verificar a resposta do usuário\n  const handleAnswer = selectedOption => {\n    const correctAnswer = flashcards[index].answer;\n    if (selectedOption === correctAnswer) {\n      setQuizResults(prev => ({\n        ...prev,\n        correct: prev.correct + 1\n      }));\n    } else {\n      setQuizResults(prev => ({\n        ...prev,\n        incorrect: prev.incorrect + 1\n      }));\n    }\n\n    // Avançar para a próxima questão ou finalizar o quiz\n    if (index + 1 < flashcards.length) {\n      const nextIndex = index + 1;\n      setIndex(nextIndex);\n      generateOptions(nextIndex); // Gera opções para a próxima questão\n    } else {\n      setQuizCompleted(true);\n    }\n  };\n\n  // Sair do modo prova\n  const exitQuizMode = () => {\n    setIsQuizMode(false);\n    setQuizResults({\n      correct: 0,\n      incorrect: 0\n    });\n    setQuizCompleted(false);\n    setIndex(0);\n    setShowAnswer(false); // Oculta a resposta ao sair do modo prova\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex flex-col items-center justify-center gap-4 p-4 bg-background text-foreground dark:bg-dark-background dark:text-dark-text-primary transition-colors duration-200\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-4 right-4\",\n      children: /*#__PURE__*/_jsxDEV(ThemeToggle, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), !isQuizMode && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        className: \"w-full max-w-xl text-center shadow-xl\",\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          className: \"p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold mb-4\",\n            children: flashcards[index].question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this), showAnswer && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-base p-4 rounded-md bg-gray-50 text-gray-700 dark:bg-dark-surface dark:text-dark-text-secondary\",\n            children: flashcards[index].answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-4\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline\",\n          onClick: () => setIndex(prev => (prev - 1 + flashcards.length) % flashcards.length),\n          children: \"Anterior\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setShowAnswer(!showAnswer),\n          children: showAnswer ? \"Ocultar Resposta\" : \"Mostrar Resposta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline\",\n          onClick: () => setIndex(prev => (prev + 1) % flashcards.length),\n          children: \"Pr\\xF3ximo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"default\",\n        onClick: startQuizMode,\n        children: \"Iniciar Modo Prova\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), isQuizMode && !quizCompleted && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: \"w-full max-w-xl text-center shadow-xl\",\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          className: \"p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold mb-4\",\n            children: flashcards[index].question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-col gap-2\",\n            children: options.map((option, i) => /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline\",\n              onClick: () => handleAnswer(option),\n              className: \"text-left px-4 py-3 md:text-center\" // Alinhamento à esquerda em mobile, centralizado em desktop\n              ,\n              children: option\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 13\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 5\n      }, this)\n    }, void 0, false), quizCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold\",\n        children: \"Resultados do Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg\",\n        children: [\"Acertos: \", quizResults.correct]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg\",\n        children: [\"Erros: \", quizResults.incorrect]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"default\",\n        onClick: exitQuizMode,\n        children: \"Sair do Modo Prova\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n}\n_s(FlashcardsApp, \"9c0hJ0oD0m1io/nH+SgG59vHf4w=\");\n_c = FlashcardsApp;\nvar _c;\n$RefreshReg$(_c, \"FlashcardsApp\");","map":{"version":3,"names":["useState","Card","CardContent","Button","ThemeToggle","jsxDEV","_jsxDEV","Fragment","_Fragment","flashcards","question","answer","FlashcardsApp","_s","index","setIndex","showAnswer","setShowAnswer","isQuizMode","setIsQuizMode","quizResults","setQuizResults","correct","incorrect","quizCompleted","setQuizCompleted","options","setOptions","shuffleArray","array","sort","Math","random","generateOptions","currentIndex","correctAnswer","incorrectAnswers","filter","_","i","map","card","randomIncorrectAnswers","slice","allOptions","startQuizMode","handleAnswer","selectedOption","prev","length","nextIndex","exitQuizMode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","option","_c","$RefreshReg$"],"sources":["C:/Users/jonat/OneDrive/Documentos/Projetos Pessoais/Flashcards/flashcards/src/FlashcardsApp.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { Card, CardContent } from \"./components/ui/card\";\r\nimport { Button } from \"./components/ui/button\";\r\nimport ThemeToggle from \"./components/ui/ThemeToggle\";\r\n\r\nconst flashcards = [\r\n  {\r\n    question: \"O que são dados?\",\r\n    answer:\r\n      \"Representações brutas de fatos, como números, nomes ou imagens, que sozinhos não têm significado.\",\r\n  },\r\n  {\r\n    question: \"O que é informação?\",\r\n    answer:\r\n      \"Resultado da análise ou processamento dos dados, fornecendo contexto e significado.\",\r\n  },\r\n  {\r\n    question: \"O que é um banco de dados?\",\r\n    answer:\r\n      \"Coleção organizada de dados persistentes, usados para armazenar e recuperar informações.\",\r\n  },\r\n  {\r\n    question: \"O que é um SGBD?\",\r\n    answer:\r\n      \"Sistema de Gerenciamento de Banco de Dados, software que manipula e controla o acesso aos dados.\",\r\n  },\r\n  {\r\n    question: \"Quais os níveis de abstração de um BD?\",\r\n    answer:\r\n      \"Conceitual (significado dos dados), Lógico (estrutura relacional) e Físico (armazenamento).\",\r\n  },\r\n  {\r\n    question: \"O que é uma transação?\",\r\n    answer:\r\n      \"Conjunto de operações que realizam uma função lógica completa no banco de dados.\",\r\n  },\r\n  {\r\n    question: \"O que significa ACID?\",\r\n    answer:\r\n      \"Conjunto de propriedades das transações: Atomicidade, Consistência, Isolamento e Durabilidade.\",\r\n  },\r\n  {\r\n    question: \"Defina Atomicidade\",\r\n    answer:\r\n      \"Transações são indivisíveis: ou ocorrem completamente ou não ocorrem.\",\r\n  },\r\n  {\r\n    question: \"Defina Consistência\",\r\n    answer: \"Transações mantêm o banco de dados em um estado válido.\",\r\n  },\r\n  {\r\n    question: \"Defina Isolamento\",\r\n    answer: \"Transações simultâneas não interferem entre si.\",\r\n  },\r\n  {\r\n    question: \"Defina Durabilidade\",\r\n    answer: \"Transações concluídas permanecem no banco mesmo após falhas.\",\r\n  },\r\n  {\r\n    question: \"O que é uma entidade?\",\r\n    answer:\r\n      \"Objeto do mundo real representado no banco, como Pessoa ou Produto.\",\r\n  },\r\n  {\r\n    question: \"O que é uma entidade forte?\",\r\n    answer: \"Entidade que existe independentemente de outras.\",\r\n  },\r\n  {\r\n    question: \"O que é uma entidade fraca?\",\r\n    answer: \"Entidade que depende de outra para existir.\",\r\n  },\r\n  {\r\n    question: \"O que é um relacionamento?\",\r\n    answer: \"Associação entre duas ou mais entidades.\",\r\n  },\r\n  {\r\n    question: \"O que é um relacionamento identificador?\",\r\n    answer: \"Relacionamento entre entidade forte e entidade fraca.\",\r\n  },\r\n  {\r\n    question: \"O que é cardinalidade?\",\r\n    answer: \"Define o número de ocorrências entre entidades (1:1, 1:N, N:N).\",\r\n  },\r\n  {\r\n    question: \"O que é um atributo?\",\r\n    answer: \"Característica de uma entidade ou relacionamento.\",\r\n  },\r\n  {\r\n    question: \"O que é um atributo identificador?\",\r\n    answer: \"Atributo que diferencia cada ocorrência (ex: id, RA).\",\r\n  },\r\n  {\r\n    question: \"O que é um atributo composto?\",\r\n    answer: \"Atributo formado por subatributos (ex: endereço → rua, cidade).\",\r\n  },\r\n  {\r\n    question: \"O que é um atributo multivalorado?\",\r\n    answer: \"Atributo que pode ter vários valores (ex: telefone).\",\r\n  },\r\n  {\r\n    question: \"O que é generalização e especialização?\",\r\n    answer:\r\n      \"Relação entre entidade genérica e suas versões específicas (Pessoa → Aluno, Professor).\",\r\n  },\r\n];\r\n\r\nexport default function FlashcardsApp() {\r\n  const [index, setIndex] = useState(0);\r\n  const [showAnswer, setShowAnswer] = useState(false);\r\n  const [isQuizMode, setIsQuizMode] = useState(false);\r\n  const [quizResults, setQuizResults] = useState({ correct: 0, incorrect: 0 });\r\n  const [quizCompleted, setQuizCompleted] = useState(false);\r\n  const [options, setOptions] = useState([]);\r\n\r\n  // Função para embaralhar um array\r\n  const shuffleArray = (array) => array.sort(() => Math.random() - 0.5);\r\n\r\n  // Função para gerar opções de resposta para o modo prova\r\n  const generateOptions = (currentIndex) => {\r\n    const correctAnswer = flashcards[currentIndex].answer; // Use o índice atual passado como argumento\r\n    const incorrectAnswers = flashcards\r\n      .filter((_, i) => i !== currentIndex) // Exclui a resposta correta\r\n      .map((card) => card.answer);\r\n    const randomIncorrectAnswers = shuffleArray(incorrectAnswers).slice(0, 3); // Seleciona 3 respostas erradas\r\n    const allOptions = shuffleArray([correctAnswer, ...randomIncorrectAnswers]); // Embaralha as opções\r\n    setOptions(allOptions);\r\n  };\r\n\r\n  // Alternar para o modo prova\r\n  const startQuizMode = () => {\r\n    setIsQuizMode(true);\r\n    setQuizResults({ correct: 0, incorrect: 0 });\r\n    setQuizCompleted(false);\r\n    setIndex(0);\r\n    generateOptions(0);\r\n  };\r\n\r\n  // Verificar a resposta do usuário\r\n  const handleAnswer = (selectedOption) => {\r\n    const correctAnswer = flashcards[index].answer;\r\n    if (selectedOption === correctAnswer) {\r\n      setQuizResults((prev) => ({ ...prev, correct: prev.correct + 1 }));\r\n    } else {\r\n      setQuizResults((prev) => ({ ...prev, incorrect: prev.incorrect + 1 }));\r\n    }\r\n\r\n    // Avançar para a próxima questão ou finalizar o quiz\r\n    if (index + 1 < flashcards.length) {\r\n      const nextIndex = index + 1;\r\n      setIndex(nextIndex);\r\n      generateOptions(nextIndex); // Gera opções para a próxima questão\r\n    } else {\r\n      setQuizCompleted(true);\r\n    }\r\n  };\r\n\r\n  // Sair do modo prova\r\n  const exitQuizMode = () => {\r\n    setIsQuizMode(false);\r\n    setQuizResults({ correct: 0, incorrect: 0 });\r\n    setQuizCompleted(false);\r\n    setIndex(0);\r\n    setShowAnswer(false); // Oculta a resposta ao sair do modo prova\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col items-center justify-center gap-4 p-4 bg-background text-foreground dark:bg-dark-background dark:text-dark-text-primary transition-colors duration-200\">\r\n      <div className=\"absolute top-4 right-4\">\r\n        <ThemeToggle />\r\n      </div>\r\n\r\n      {!isQuizMode && (\r\n        <>\r\n          <Card className=\"w-full max-w-xl text-center shadow-xl\">\r\n            <CardContent className=\"p-6\">\r\n              <h2 className=\"text-xl font-semibold mb-4\">\r\n                {flashcards[index].question}\r\n              </h2>\r\n              {showAnswer && (\r\n                <p className=\"text-base p-4 rounded-md bg-gray-50 text-gray-700 dark:bg-dark-surface dark:text-dark-text-secondary\">\r\n                  {flashcards[index].answer}\r\n                </p>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <div className=\"flex gap-4\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={() =>\r\n                setIndex(\r\n                  (prev) => (prev - 1 + flashcards.length) % flashcards.length\r\n                )\r\n              }\r\n            >\r\n              Anterior\r\n            </Button>\r\n            <Button onClick={() => setShowAnswer(!showAnswer)}>\r\n              {showAnswer ? \"Ocultar Resposta\" : \"Mostrar Resposta\"}\r\n            </Button>\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={() => setIndex((prev) => (prev + 1) % flashcards.length)}\r\n            >\r\n              Próximo\r\n            </Button>\r\n          </div>\r\n\r\n          <Button variant=\"default\" onClick={startQuizMode}>\r\n            Iniciar Modo Prova\r\n          </Button>\r\n        </>\r\n      )}\r\n\r\n{isQuizMode && !quizCompleted && (\r\n  <>\r\n    <Card className=\"w-full max-w-xl text-center shadow-xl\">\r\n      <CardContent className=\"p-6\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">{flashcards[index].question}</h2>\r\n        <div className=\"flex flex-col gap-2\">\r\n          {options.map((option, i) => (\r\n            <Button\r\n              key={i}\r\n              variant=\"outline\"\r\n              onClick={() => handleAnswer(option)}\r\n              className=\"text-left px-4 py-3 md:text-center\" // Alinhamento à esquerda em mobile, centralizado em desktop\r\n            >\r\n              {option}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  </>\r\n)}\r\n\r\n      {quizCompleted && (\r\n        <div className=\"text-center\">\r\n          <h2 className=\"text-2xl font-bold\">Resultados do Quiz</h2>\r\n          <p className=\"text-lg\">Acertos: {quizResults.correct}</p>\r\n          <p className=\"text-lg\">Erros: {quizResults.incorrect}</p>\r\n          <Button variant=\"default\" onClick={exitQuizMode}>\r\n            Sair do Modo Prova\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}